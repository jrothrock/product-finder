name: Python application

on:
  push:
    branches: master
  pull_request:
    branches: master

jobs:
  test:
  
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        if [ -f poetry.lock ]; then poetry install; fi
    - name: Check has black formatting
      run: |
        # stop the build if black formatting not applied
        poetry run python -m black . --check
    - name: Check imports are sorted correctly
      run: |
        # stop the build if there are isort errors
        poetry run python -m isort . --check
    - name: Check Pydocs have been added
      run: |
        # stop the build if there are Pydoc style missing
        poetry run python -m pydocstyle --count
    - name: Lint with flake8
      run: |
        # stop the build if there are flake errors
        poetry run python -m flake8 . --count --statistics
    - name: Test with pytest
      run: |
        poetry run python -m pytest
  deploy:
    name: "Deploy app"
    runs-on: ubuntu-latest
    # if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: test
    steps:
      - uses: actions/checkout@v2
      - name: Dynamically set CURRENT_TIME environment variable
        run: echo CURRENT_TIME=$(date '+%s') >> $GITHUB_ENV
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          ssh-keyscan ${{ env.SSH_HOST }} >> ~/.ssh/known_hosts
          ssh-agent -a ${{ env.SSH_AUTH_SOCK }} > /dev/null
          echo "${{ env.SSH_KEY }}" | ssh-add -
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
          SSH_USER: ${{ secrets.DEPLOY_SSH_USER }}
          SSH_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
          SSH_HOST: ${{ secrets.DEPLOY_SSH_HOST }}

      - name: Create directory
        run: ssh ${{ secrets.DEPLOY_SSH_USER }}@${{ secrets.DEPLOY_SSH_HOST }} 'mkdir -p ~/deploys/${{ env.CURRENT_TIME }}'

      - name: Copy code to server
        run: rsync -avz ./ finder:~/deploys/${{ env.CURRENT_TIME }}/
      
      - name: Stop Docker containers
        run: docker stop $(docker ps -q)
      
      - name: Start Docker
        run: docker-compose up -d

      - name: Remove Oldest Directory If More Than 5
        run: ssh finder 'cd deploys; if [[ (ls | wc -l) -gt 5 ]]; then rm -rf $(ls -t1 | tail -n 1); fi'
  